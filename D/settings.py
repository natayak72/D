"""
Django settings for D project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+i*!pzy5%!1keh08^2q4d!em#hb!bj-p04k7x0w2t$dmast($n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'news.apps.NewsConfig',
    'sign.apps.SignConfig',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_apscheduler'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'D.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'D.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/news'
LOGOUT_REDIRECT_URL = '/news'

DEFAULT_FROM_EMAIL = 'yacyna.pavel@yandex.ru'

SITE_ID = 1

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'username'
# ACCOUNT_EMAIL_VERIFICATION = 'none'

# ACCOUNT_FORMS = {'signup': 'sign.forms.BasicSignupForm'}


EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'yacyna.pavel'
EMAIL_HOST_PASSWORD = 'wkwjkejbsqstnqsq'  # Имя пароля - sf
EMAIL_USE_SSL = True

# формат даты, которую будет воспринимать наш задачник
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files')
    }
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(asctime)s %(levelname)s %(message)s'
        },
        'warning_formatter': {
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s'
        },
        'errors_formatter': {
            'format': '%(asctime)s %(levelname)s %(pathname)s %(exc_info)s %(message)s'
        },
        'file_general_formatter': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s'
        },
        'file_errors_formatter': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s'
        },
        'email_formatter': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s'
        },
    },
    'filters': {
        'require_debug_true_filter': {
            '()': 'django.utils.log.RequireDebugTrue'
        },
        'require_debug_false_filter': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console_handler': {
            'level': 'DEBUG',
            'filters': ['require_debug_true_filter'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'console_warning_handler': {
            'level': 'WARNING',
            'filters': ['require_debug_true_filter'],
            'class': 'logging.StreamHandler',
            'formatter': 'warning_formatter'
        },
        'console_errors_handler': {
            'level': 'WARNING',
            'filters': ['require_debug_true_filter'],
            'class': 'logging.StreamHandler',
            'formatter': 'errors_formatter'
        },
        "file_general_handler": {
            "level": "INFO",
            "class": "logging.FileHandler",
            'filters': ['require_debug_false_filter'],
            "filename": f"{os.path.join(BASE_DIR, 'logs')}/general.log",
            'formatter': 'file_general_formatter'
        },
        "file_errors_handler": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": f"{os.path.join(BASE_DIR, 'logs')}/errors.log",
            'formatter': 'file_general_formatter'
        },
        "file_handler_security": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": f"{os.path.join(BASE_DIR, 'logs')}/security.log",
            'formatter': 'file_general_formatter'
        },
        "email_handler": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            'formatter': 'email_formatter',
            'filters': ['require_debug_false_filter'],
        },

    },
    'loggers': {
        'django': {
            'handlers': ['console_handler', 'console_warning_handler', 'console_errors_handler',
                         'file_general_handler'],
        },
        'django.request': {
            'handlers': ['file_security_errors_handler', 'email_handler'],
        },
        'django.server': {
            'handlers': ['file_security_errors_handler', 'email_handler'],
        },
        'django.template': {
            'handlers': ['file_security_errors_handler'],
        },
        'django.db_backends': {
            'handlers': ['file_security_errors_handler'],
        },
        'django.security': {
            'handlers': ['file_handler_security'],
        }
    }
}
